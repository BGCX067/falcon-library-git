little_endian et big_endian non vérifier
number.hpp pas finalisée
voir les TODO et NOTE de endian.hpp

fonction de construction par lot voir bits/stl_uninitialized.h et bits/stl_construct.h (+implementation qui ne fait pas de destruction en passant par exemple un no_garbage_collector_t ou en indiquand dans le nom uninitialized_without_garbage_collector qui retourne un objet avec l'exceptions ou non et l'iterator de fin). fichier à mettre dans memory. Trouver un autre nom que garbage_collector.

rendre operators.hpp un peu compatible c++89

modifier CPP0X_PROTO et CPP0X_DELEGATE_FUNCTION pour que le second argument soit une expression. Donc CPP0X_PROTO(f(char), (int)), CPP0X_DELEGATE_FUNCTION(f(char c), (c+8)). Faire un CPP0X_PROTO_EXPR qui fait comme CPP0X_DELEGATE_FUNCTION mais avec juste le prototype.

Essayer d'enlever un maximum de macro variable

objet optimiser pour la conversion de chiffre en chaine numeric_string<TypeInt, CharT, CharTraits>. Notamment pour ce qui est de l'incrementation de chaine (et l'incrementation répercuter en general (ex: unite puis dizaine, etc)). pouvoir utilisé des char* ou std::string. Le CharTraits fait l'affaire ? faire un typedef pour le c et wchar en string ou non. (cnumeric_string, cnumeric_wstring, numeric_string, numeric_wstring). Le type char* peut fonctionne avec unique_ptr. Laisser à l'utilisateur choisir le container de stockage (on boucle dessus avec infinite_iterator pour écrire les chiffres)

iota(begin(), end(), first_value): le faire avec iota(container, first_value)

flag.hpp: doit possèder un constructeur avec avec initializer_list.
flag<>::operator[n] : bit_flag<> ? bit_wrapper<_T>{_T*} ?

optimiser recursive_iterator (et l'algo de recursion) pour les tableaux. En partant du principe que a[x][y] = a[x*y] ne faire qu'une boucle

faire un algorithmfwd.hpp pour bien nommer les champs

optimisation de taille des enum class: enum class E : typename std::conditional<l.size() == 2, bool, int>::type {…}; (minimal_int<>::type ?)

Mettre constexpr pour les classe d'operateur et enum/operator

ajouter le calcul (A+(B-1))/B qui permet de calculer le nombre requis de B pour mettre A (equivalent à A/B+(A%B?1:0) qui est le plus rapide ? le compilateur gènére le même code ? optimisation ?). quotient partiel.

enumerator: Enleve les macros variable et passer par __VA_ARGS__. Y extraire NOTE et TODO.

revoir btree et btree_base et réactiver les tests

faire des traits char_traits qui transforme tout en majuscule, en minuscule et élimine les accents. Faire un string qui fait des comparaisons insensibles à la case. Quel char_traits existe-il dans boost ?

ne pas oublier le suport de char16_t et char32_t

le hash dans basic_cstring a externaliser dans un hash.hpp. Faire un hash_byte() comme la std.

mettre tous les operator()(...) des foncteurs en const (si cela est possible).

basic_string_repetition<_String>{_String, size_t} ? (os << string_repetition('a', 4) -> "aaaa"). faire std::to_string()

ostream::repetition(_Obj, size_t) et ostream::repetition(_Obj, size_t, _CharT separator) ; avec _CharT = _Obj::char_type. Idem pour les ostream

si on active les exceptions des flux, comment ce comporte les fonctions lié (ignore, ignore_all, etc) ? Le state est bien setter à badbit et non égal à good.

ajouter les typedef result_type, argument_type, first_argument_type et second_argument_type -quand possible- dans les classes de operators.hpp. Faire un not1 et not2 comme la std.

structure englopant un type et pour chaque operateur suceptible de changer le type (pour les type scalaire < int) fait un static_cast. (force_type<_T> ? force_type_wrapper<> ? force_scalar<> ? integral_wrapper<> ?). Cas particulier pour l'incrementation et decrementation sur enum.
Permet ainsi de s'affranchir des enum_* en passant par les foncteurs sur operateurs: enum_plus<enum_t> -> plus<integral_wrapper<enum_t>>, enum_increment<enum_t> -> increment<integral_wrapper<enum_t&>>
ajouter le keyword enum pour enum/operators.hpp ou étendre une classe au nom plus générique qui fait un cast pour les opérations arithmétique ou binaire (plus_conversion, etc ?). La classe generique heriter des operateurs de la façon décrit au-dessus.

amélioré algorithm.hpp en "optimisant" les algos quand possible (nottament quand directement utilisé avec un container). std::remove(s.begin(), s.end(), ',') copie inutile de caractères jusqu'à la première occurence trouvé. falcon::remove(s, ',') cherche la première occurence (std::find) puis utilise std::remove.

singleton<_T> qui utilise static_new. Peut-être un singleton_id<_T, _Id>. Voir aussi call_once

container trier de façon static. version map et set et unordered. Faire un static_check<obj, compare, predicate>() ou un truc du genre. Pour permettre de vérifier des conditions à la compilation.

les lambdas toujours par reference ou il faut parfois utiliser std::ref ? Pas le cas pour while_loop et co...

faire un make_parameter_adapter() et un make_tuple_applier().

temporary_tuple_cat (tuple concatener par reference ?)

tuple_organizer<_Tag, bool no_tuple_parameter_is_tuple = true> pour faire une agglomération de tuple et filtrer les éléments non voulut. tuple_organizer<_Functor, _Tag> avec _Tag parameter-tag, parameter_index<> ou wrapper avec organizer_for_each_tag (ex organizer_for_each_tag<_Tag>) qui va s'appliquer indépendament sur chaque tuple. Passer par un traits pour faire appliquer ces tags: organizer_tag_to_parameter_index<_Tag, _Tuples>::type

les tuple_* doivent fonctionner avec std::pair<>, faire des tests

unary_compose et binary_compose doivent pouvoir deviné le type des fonctions

faire en sorte que mulary_compose passe par héritage au lieu de tuple. Le bool passé en template ne doit pas existé autrement qu'en interne. renommer en *_base et passer par un alias ?
mulary_compose doit hériter et compose retourner unary_compose ou binary_compose quand cela est possible.

unary_compose, binary_compose et mulary_compose supporte falcon::ignore quand on les construits

faire un function_compose<...> (+ fonction composef()) comme mulary_compose mais prend un nombre de paramètre allant de 0 à infinit.

dans enumerator faire une allocation de la chaîne en tant que expression constante (déjà fait ?)

tester les compose() avec les distributions (voir random_device ? (exemple dans cppreference.com avec les distributions))

les compose() devrais pouvoir fonctionenr avec les références (pas le cas actuellement). Fonctionne avec std::ref() sans perte de perf (même binaire) ?

strong_reference_wrapper: faire des tests

enlever les doubles underscore car reservé. Idem pour les underscores suivit de majuscule dans l'espace globale.

Vérifier les types tag dans les iterateurs.
Ajouter dans les iterators les fonctions pour acceder aux fonctorx lorsque ceux-ci en utilisent (fn() ?).

algorithm.hpp : ne prend pas en compte les containers constant…

tuple_get_accessor → get_idx_accessor ? getidx_accessor ? get_index_accessor ?

flag.hpp: pb avec le decalage de bit de flag. flag.cpp: good for gcc-4.7, fail with gcc-4.6…

late_delegation<_FunctorTemplate, _FunctorAllocator = always<> > -> operator(…) { return _FunctorAllocator(…) } ; _FunctorAllocator -> return _ClassTemplate<_T>()

ajouter PP dans les macros de preprocessor (FALCON_CAT ⇒ FALCON_PP_CAT) qui sera remplacé par BOOST_PP_CAT

tuple_*: ignorer les valeurs de type std::ignore_t. Les fonctions retournant void voient leur type changer en std::ignore_t.

literal/utility.hpp: support de la convertion de flottant et faire le support de l'hexadecimal et octal pour les entegrals et l'hexadecimal pour les flottants (voir pdf plus bas pour les suffix).
implémenter la proposition de suffix dans la nouvelle norme: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3402.pdf
ne pas oublier de prendre en compte les unités (non mis dans la norme) avec les abréviations udl ou iso

modifier les noms des macro CPP1X_* et CPP_* en FALCON_* (et FALCON_CXX1X_ ?)
#define FALCON_STATIC_CONSTEXPR static FALCON_CONSEXPR_OR_CONST
utilisé les macros prédéfinit dans boost
www.boost.org/doc/libs/1_49_0/libs/config/doc/html/boost_config/boost_macro_reference.html

node/*.hpp: peuvent fonctionner de façon transparente avec des std::unique_ptr ?

utiliser optimal_tuple dans recursive_iterator

revoir les java_iterator pour faire un heritage sur un java_iterator_handler comme pour les iterators. Supprimer {java_,}iterator/detail et type_traits/is_java_iterator.hpp
changer le nom des java_iterator en range_iterator et merger les fonction make_range_iterator et range_iterator

peut-on supprimer les constructeurs de copie et l'affectation dans les iterateurs sans que cela crée des copies ? il faudra surement faire un move ctor et un move copy

preprocessor/move.hpp -> c++/move.hpp ?

faire un range qui prend des iterateur pour creer un container_wrapper et être utiliser avec for(auto& v:range(it, it+3)). ainsi qu'un ref_range qui ne va pas copier le first et end mais prendre des references (sauf end si rref)

mettre des rref quand un foncteur est demander dans les fonctions (tuple_assign, etc)

tableau 2 dimensions allouer comme 1 de la forme:
int **pptr = malloc(x * sizeof(int*) + y * x * sizeof(int));
int *ptr = (int*)(pptr) + y * sizeof(int*);
for (i = 0; i != y; i++)
	pptr[i] = ptr + i * x;
//pptr[x][y]
et tableau n dimension allouer comme 1 et p[x*y]

istream/operators.hpp: enlever la parties sur les char * ou à mettre dans un namespace idem pour le tableau d'objet. Il n'y a pas de verification du nombre inseré...

fonction pour simplifier les operations sur buffer (renvoit false si eof):
	snextc: bool snextc(buffer, &c)
	sputc: bool sputc(buffer, c)
	sputn: bool sputn(buffer, s, n)
	sgetn: bool sgetn(buffer, s, n)
	sgetc: bool sgetc(buffer, &c)
	ios/streambuf.hpp
mettre certain fichier de {i,o,io}stream/ dans ios/
intrusive data stream (eback, gptr, egptr, pbase, pptrm epptr). Retourne les valeurs interne de ces pointeurs (mettre dans ios/)

tuple/detail/operateurs.hpp ? -> tuple/tuple_manip.hpp : et implementation pour tout qui ce comporte comme un tuple

classe wrapper pour __m128, __m128d, __m256, __m256d et autres type de (/usr/lib/gcc/x86_64-linux-gnu/4.7/include/{avxintrin,avx2intrin,emmintrin,xmmintrin,...}.h). (header different pour vs++ ?)

macro FALCON_PROPERTY_{READ,WRITE,RW,GET,SET,ACCESS}
property.hpp: remplacer properties et properties_t par un enum class properties et using properties_t = properties_t ?

faire un xor_swap (et ranges_xor_swap et iter_xor_swap)

basic_string_reference<String>(String&, start, size)
string_reference=basic_string_reference<std::string>
cstring fonctionnant sur pile (alloue un tableau de char). Hérite de cstring (private/protected). Implémenter à travers cstrnig par un CharT = char_type<N, CharT = char> ? (changer le nom de char_type)

is_instance_of -> std::is_base_of ? iostream/is_ios.hpp fonctionne quand même ?

make_range_container2(it,it): meme chose que make_range_container(...) mais retourne un paire contenant reference et numero d'iteration

local_pool_allocator: non thread save. pointeur sauvegarder sous forme de tableau (la copie partage le même storage)
global_pool_allocator: non thread save. pointeur sauvegarder sous forme de tableau static
pool_allocator: un global_pool_adapter qui utilise des mutex si besoin
les mêmes allocateur (de pool) mais qui sont utilisé avec scoped_adapter_allocator pour faire des pools sur un ensemble de container

support des non exceptions (retourne 0 au lieu de bad_alloc). Flag -fno-exceptions pour gcc. Utiliser la macro BOOST_NO_EXCEPTIONS dans boost/config.hpp

type_trait, spécification pour T[] (pas de taille)

container toujours trier. Fournir le type de container principal en template. Même interface que vector, list et deque (faire le trie). priority_queue ?

implementation de simple signal

utilisé FALCON_EMPTY (BOOST_EMPTY ?) pour arguments vide de macro

faire en sorte que enumerator ne dépende plus de __VA_ARGS__

trouver un autre nom pour static_new

modifier multibuf pour qu'il prenne un 'Nexter' au lieu de gérer un tableau interne. Le nexter gere le passage au fichier suivant en retournant son nom. Ainsi, le tableau de nom pourra ce faire via cet objet. Fournir au moins un generate_filename (ou autre nom) qui sera le parametre par defaut dans la template.

dans les allocateur, ajouter un constructeur qui prend le parent en argument (const& et rvalue).
allocator: operator== si besoin

shared_allocator. Par exemple shared_allocator<free_list_allocator> partage tous le même allocateur. Moyen de le faire avec un scoped_adapter_allocator ?

iterator comme zone mais dans différente direction: http://www.thonky.com/qr-code-tutorial/module-placement-matrix/#pattern-of-placement. Renommer zonne_iterator ?

renommer container_wrapper en sequence_wrapper ?

poc sur objet supportant le placement de paramètre nommé (comme en python)

allocateur mal aligner. C'est le cas de free_node. Vérifier avec avec un vector4 ou un __m256.

un stream qui fait une écriture sur 2 flux (ou plus, celon le générateur)


